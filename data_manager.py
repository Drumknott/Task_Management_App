import json_data_manager
import datetime

task_report = "task_overview.txt"
user_report = "user_overview.txt"


class UserStats:
    def __init__(self, num_tasks, num_completed, num_incomplete_overdue):
        self.num_tasks = num_tasks
        self.num_completed = num_completed
        self.num_incomplete_overdue = num_incomplete_overdue


full_time = datetime.datetime.today()
current_date = str(full_time)[:10]


def display_stats(current_user):
    print("VIEW STATISTICS")
    generate_reports(current_user)

    with open(task_report, 'r') as t_report:
        for line in t_report:
            print(line, end=" ")

    with open(user_report, 'r') as u_report:
        for line in u_report:
            print(line, end=" ")


def generate_reports(current_user):
    # declare variables
    number_of_incomplete_tasks = 0
    number_of_overdue_tasks = 0
    tasks_by_user = {}

    # read data from task file
    all_tasks = json_data_manager.load_task_data()

    # read data from users file
    user_dictionary = json_data_manager.import_user_data()

    # iterate through data to collect information
    for task in all_tasks:
        if task.completed == "No":
            number_of_incomplete_tasks += 1
        if datetime.datetime.strptime(task.date_due.strip(), '%Y-%m-%d') < full_time and task.completed == "No":
            number_of_overdue_tasks += 1

    for user, password in user_dictionary.items():
        tasks_by_user[user] = UserStats(0, 0, 0)
        for _task in all_tasks:
            if _task.assigned_to == user:
                tasks_by_user[user].num_tasks += 1
                if _task.completed == "Yes":
                    tasks_by_user[user].num_completed += 1
                if _task.completed == "No" and datetime.datetime.strptime(_task.date_due.strip(), '%Y-%m-%d') < full_time:
                    tasks_by_user[user].num_incomplete_overdue += 1

    # calculate information required
    total_tasks = len(all_tasks)
    number_of_completed_tasks = total_tasks - number_of_incomplete_tasks
    percentage_incomplete_tasks = round((number_of_incomplete_tasks / total_tasks) * 100, 2)
    percentage_overdue_tasks = round((number_of_overdue_tasks / total_tasks) * 100, 2)

    total_users = len(user_dictionary)

    # output task report to file
    task_report_string = f'''
    TASK REPORT generated by {current_user} on {current_date}

    Total number of tasks managed:  {total_tasks}
    Tasks completed:                {number_of_completed_tasks}
    Tasks outstanding:              {number_of_incomplete_tasks} ({percentage_incomplete_tasks}%)
    Tasks Overdue:                  {number_of_overdue_tasks} ({percentage_overdue_tasks}%)    
    '''

    with open(task_report, 'w') as t_report:
        t_report.write(task_report_string)

    # output user report to file
    user_report_string = f'''
    ----------------------------------------------------------------------------------------------------------
    USERS REPORT generated by {current_user} on {current_date}

    Total number of users: {total_users}
    Total number of tasks managed: {total_tasks}
    __________________________________________________________________________________________________________
    USER        Tasks Assigned (Amount, % overall)      % Complete  % Incomplete  % Overdue\n'''

    with open(user_report, 'w') as u_report:
        u_report.write(user_report_string)

    with open(user_report, 'a') as u_report:
        for key, value in tasks_by_user.items():
            percent_tasks_assigned = round((value.num_tasks / total_tasks) * 100, 2)

            try:
                percent_complete = round((value.num_completed / value.num_tasks) * 100, 2)
                percent_incomplete = round(((value.num_tasks - value.num_completed) / value.num_tasks) * 100, 2)
                percent_overdue = round((value.num_incomplete_overdue / value.num_tasks) * 100, 2)

            except ZeroDivisionError:
                percent_complete = 0
                percent_incomplete = 0
                percent_overdue = 0

            u_report.write(f"\t{key}: \t\t\t{value.num_tasks}, "
                           f"{percent_tasks_assigned}% "
                           f"\t\t\t\t\t\t{percent_complete}% "
                           f"\t\t{percent_incomplete}% "
                           f"\t\t{percent_overdue}%\n")
